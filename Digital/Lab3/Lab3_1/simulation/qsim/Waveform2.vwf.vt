// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2017 18:20:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab3_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab3_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_;
reg cntrl0;
reg cntrl1;
reg cntrl2;
// wires                                               
wire LEDR;

// assign statements (if any)                          
Lab3_1 i1 (
// port map - connection between master ports and signals/registers   
	.clk_(clk_),
	.cntrl0(cntrl0),
	.cntrl1(cntrl1),
	.cntrl2(cntrl2),
	.LEDR(LEDR)
);
initial 
begin 
#1000000 $finish;
end 

// clk_
always
begin
	clk_ = 1'b0;
	clk_ = #10000 1'b1;
	#10000;
end 

// cntrl2
initial
begin
	cntrl2 = 1'b0;
end 

// cntrl1
initial
begin
	cntrl1 = 1'b1;
end 

// cntrl0
initial
begin
	cntrl0 = 1'b0;
end 
endmodule

