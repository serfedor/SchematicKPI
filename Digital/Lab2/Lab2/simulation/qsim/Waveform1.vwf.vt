// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/21/2017 20:55:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab2_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab2_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c0;
reg [7:0] InputA;
reg [7:0] InputB;
// wires                                               
wire c8;
wire [7:0] Out;

// assign statements (if any)                          
Lab2_1 i1 (
// port map - connection between master ports and signals/registers   
	.c0(c0),
	.c8(c8),
	.InputA(InputA),
	.InputB(InputB),
	.Out(Out)
);
initial 
begin 
#160000 $finish;
end 

// c0
initial
begin
	c0 = 1'b0;
end 
// InputA[ 7 ]
initial
begin
	InputA[7] = 1'b0;
	InputA[7] = #10000 1'b1;
	InputA[7] = #10000 1'b0;
	InputA[7] = #10000 1'b1;
	InputA[7] = #30000 1'b0;
	InputA[7] = #10000 1'b1;
	InputA[7] = #20000 1'b0;
	InputA[7] = #10000 1'b1;
	InputA[7] = #10000 1'b0;
	InputA[7] = #10000 1'b1;
	InputA[7] = #20000 1'b0;
	InputA[7] = #10000 1'b1;
end 
// InputA[ 6 ]
initial
begin
	InputA[6] = 1'b0;
	InputA[6] = #10000 1'b1;
	InputA[6] = #20000 1'b0;
	InputA[6] = #30000 1'b1;
	InputA[6] = #20000 1'b0;
	InputA[6] = #10000 1'b1;
	InputA[6] = #40000 1'b0;
	InputA[6] = #10000 1'b1;
	InputA[6] = #10000 1'b0;
end 
// InputA[ 5 ]
initial
begin
	InputA[5] = 1'b0;
	InputA[5] = #10000 1'b1;
	InputA[5] = #30000 1'b0;
	InputA[5] = #10000 1'b1;
	InputA[5] = #30000 1'b0;
	InputA[5] = #10000 1'b1;
	InputA[5] = #10000 1'b0;
	InputA[5] = #10000 1'b1;
	InputA[5] = #10000 1'b0;
	InputA[5] = #30000 1'b1;
end 
// InputA[ 4 ]
initial
begin
	InputA[4] = 1'b0;
	InputA[4] = #10000 1'b1;
	InputA[4] = #10000 1'b0;
	InputA[4] = #10000 1'b1;
	InputA[4] = #20000 1'b0;
	InputA[4] = #20000 1'b1;
	InputA[4] = #20000 1'b0;
	InputA[4] = #20000 1'b1;
	InputA[4] = #10000 1'b0;
	InputA[4] = #10000 1'b1;
	InputA[4] = #10000 1'b0;
	InputA[4] = #10000 1'b1;
end 
// InputA[ 3 ]
initial
begin
	InputA[3] = 1'b0;
	InputA[3] = #10000 1'b1;
	InputA[3] = #10000 1'b0;
	InputA[3] = #30000 1'b1;
	InputA[3] = #10000 1'b0;
	InputA[3] = #30000 1'b1;
	InputA[3] = #10000 1'b0;
	InputA[3] = #10000 1'b1;
	InputA[3] = #10000 1'b0;
end 
// InputA[ 2 ]
initial
begin
	InputA[2] = 1'b0;
	InputA[2] = #10000 1'b1;
	InputA[2] = #30000 1'b0;
	InputA[2] = #10000 1'b1;
	InputA[2] = #10000 1'b0;
	InputA[2] = #10000 1'b1;
	InputA[2] = #40000 1'b0;
	InputA[2] = #20000 1'b1;
end 
// InputA[ 1 ]
initial
begin
	InputA[1] = 1'b0;
	InputA[1] = #10000 1'b1;
	InputA[1] = #30000 1'b0;
	InputA[1] = #20000 1'b1;
	InputA[1] = #10000 1'b0;
	InputA[1] = #10000 1'b1;
	InputA[1] = #10000 1'b0;
	InputA[1] = #10000 1'b1;
	InputA[1] = #40000 1'b0;
end 
// InputA[ 0 ]
initial
begin
	InputA[0] = 1'b0;
	InputA[0] = #10000 1'b1;
	InputA[0] = #40000 1'b0;
	InputA[0] = #50000 1'b1;
	InputA[0] = #30000 1'b0;
end 
// InputB[ 7 ]
initial
begin
	InputB[7] = 1'b0;
	InputB[7] = #10000 1'b1;
	InputB[7] = #10000 1'b0;
	InputB[7] = #10000 1'b1;
	InputB[7] = #20000 1'b0;
	InputB[7] = #20000 1'b1;
	InputB[7] = #20000 1'b0;
	InputB[7] = #10000 1'b1;
	InputB[7] = #20000 1'b0;
	InputB[7] = #10000 1'b1;
	InputB[7] = #10000 1'b0;
end 
// InputB[ 6 ]
initial
begin
	InputB[6] = 1'b0;
	InputB[6] = #10000 1'b1;
	InputB[6] = #30000 1'b0;
	InputB[6] = #10000 1'b1;
	InputB[6] = #30000 1'b0;
	InputB[6] = #10000 1'b1;
	InputB[6] = #30000 1'b0;
	InputB[6] = #10000 1'b1;
	InputB[6] = #10000 1'b0;
end 
// InputB[ 5 ]
initial
begin
	InputB[5] = 1'b0;
	InputB[5] = #10000 1'b1;
	InputB[5] = #40000 1'b0;
	InputB[5] = #30000 1'b1;
	InputB[5] = #30000 1'b0;
	InputB[5] = #10000 1'b1;
	InputB[5] = #20000 1'b0;
end 
// InputB[ 4 ]
initial
begin
	InputB[4] = 1'b0;
	InputB[4] = #10000 1'b1;
	InputB[4] = #20000 1'b0;
	InputB[4] = #70000 1'b1;
	InputB[4] = #10000 1'b0;
end 
// InputB[ 3 ]
initial
begin
	InputB[3] = 1'b0;
	InputB[3] = #10000 1'b1;
	InputB[3] = #10000 1'b0;
	InputB[3] = #20000 1'b1;
	InputB[3] = #10000 1'b0;
	InputB[3] = #10000 1'b1;
	InputB[3] = #10000 1'b0;
	InputB[3] = #40000 1'b1;
	InputB[3] = #20000 1'b0;
	InputB[3] = #10000 1'b1;
	InputB[3] = #10000 1'b0;
end 
// InputB[ 2 ]
initial
begin
	InputB[2] = 1'b0;
	InputB[2] = #10000 1'b1;
	InputB[2] = #10000 1'b0;
	InputB[2] = #20000 1'b1;
	InputB[2] = #50000 1'b0;
	InputB[2] = #20000 1'b1;
	InputB[2] = #10000 1'b0;
	InputB[2] = #20000 1'b1;
end 
// InputB[ 1 ]
initial
begin
	InputB[1] = 1'b0;
	InputB[1] = #10000 1'b1;
	InputB[1] = #20000 1'b0;
	InputB[1] = #10000 1'b1;
	InputB[1] = #10000 1'b0;
	InputB[1] = #10000 1'b1;
	InputB[1] = #40000 1'b0;
	InputB[1] = #10000 1'b1;
	InputB[1] = #10000 1'b0;
	InputB[1] = #30000 1'b1;
end 
// InputB[ 0 ]
initial
begin
	InputB[0] = 1'b0;
	InputB[0] = #10000 1'b1;
	InputB[0] = #20000 1'b0;
	InputB[0] = #10000 1'b1;
	InputB[0] = #20000 1'b0;
	InputB[0] = #10000 1'b1;
	InputB[0] = #10000 1'b0;
	InputB[0] = #10000 1'b1;
	InputB[0] = #30000 1'b0;
	InputB[0] = #10000 1'b1;
	InputB[0] = #10000 1'b0;
end 
endmodule

