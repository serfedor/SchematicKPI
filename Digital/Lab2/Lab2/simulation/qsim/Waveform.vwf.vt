// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/29/2017 15:16:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab2_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab2_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg a4;
reg a5;
reg a6;
reg a7;
reg b0;
reg b1;
reg b2;
reg b3;
reg b4;
reg b5;
reg b6;
reg b7;
reg c0;
// wires                                               
wire C8;
wire S0;
wire S1;
wire S2;
wire S3;
wire S4;
wire S5;
wire S6;
wire S7;

// assign statements (if any)                          
Lab2_1 i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.a6(a6),
	.a7(a7),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.b5(b5),
	.b6(b6),
	.b7(b7),
	.c0(c0),
	.C8(C8),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7)
);
initial 
begin 
#1000000 $finish;
end 

// a7
initial
begin
	a7 = 1'b0;
	a7 = #80000 1'b1;
	a7 = #160000 1'b0;
	a7 = #160000 1'b1;
	a7 = #160000 1'b0;
	a7 = #320000 1'b1;
	a7 = #80000 1'b0;
end 

// a6
initial
begin
	a6 = 1'b0;
	a6 = #240000 1'b1;
	a6 = #80000 1'b0;
	a6 = #80000 1'b1;
	a6 = #240000 1'b0;
	a6 = #160000 1'b1;
	a6 = #80000 1'b0;
	a6 = #80000 1'b1;
end 

// a5
initial
begin
	a5 = 1'b0;
	a5 = #80000 1'b1;
	a5 = #240000 1'b0;
	a5 = #320000 1'b1;
	a5 = #80000 1'b0;
end 

// a4
initial
begin
	a4 = 1'b0;
	a4 = #80000 1'b1;
	a4 = #240000 1'b0;
	a4 = #320000 1'b1;
	a4 = #160000 1'b0;
	a4 = #80000 1'b1;
end 

// a3
initial
begin
	a3 = 1'b0;
	a3 = #80000 1'b1;
	a3 = #160000 1'b0;
	a3 = #80000 1'b1;
	a3 = #160000 1'b0;
	a3 = #80000 1'b1;
	a3 = #80000 1'b0;
	a3 = #240000 1'b1;
end 

// a2
initial
begin
	a2 = 1'b1;
	a2 = #160000 1'b0;
	a2 = #240000 1'b1;
	a2 = #160000 1'b0;
	a2 = #400000 1'b1;
end 

// a1
initial
begin
	a1 = 1'b1;
	a1 = #80000 1'b0;
	a1 = #80000 1'b1;
	a1 = #160000 1'b0;
	a1 = #320000 1'b1;
	a1 = #80000 1'b0;
	a1 = #80000 1'b1;
end 

// a0
initial
begin
	a0 = 1'b1;
	a0 = #160000 1'b0;
	a0 = #160000 1'b1;
	a0 = #80000 1'b0;
	a0 = #240000 1'b1;
	a0 = #80000 1'b0;
	a0 = #160000 1'b1;
end 

// b7
initial
begin
	b7 = 1'b0;
	b7 = #160000 1'b1;
	b7 = #80000 1'b0;
	b7 = #80000 1'b1;
	b7 = #160000 1'b0;
	b7 = #80000 1'b1;
	b7 = #80000 1'b0;
	b7 = #80000 1'b1;
	b7 = #160000 1'b0;
	b7 = #80000 1'b1;
end 

// b6
initial
begin
	b6 = 1'b0;
	b6 = #160000 1'b1;
	b6 = #320000 1'b0;
	b6 = #240000 1'b1;
	b6 = #80000 1'b0;
	b6 = #160000 1'b1;
end 

// b5
initial
begin
	b5 = 1'b0;
	b5 = #160000 1'b1;
	b5 = #400000 1'b0;
	b5 = #80000 1'b1;
	b5 = #160000 1'b0;
end 

// b4
initial
begin
	b4 = 1'b0;
	b4 = #80000 1'b1;
	b4 = #80000 1'b0;
	b4 = #80000 1'b1;
	b4 = #80000 1'b0;
	b4 = #80000 1'b1;
	b4 = #160000 1'b0;
	b4 = #240000 1'b1;
	b4 = #160000 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
	b3 = #80000 1'b1;
	b3 = #160000 1'b0;
	b3 = #80000 1'b1;
	b3 = #80000 1'b0;
	b3 = #80000 1'b1;
	b3 = #400000 1'b0;
	b3 = #80000 1'b1;
end 

// b2
initial
begin
	b2 = 1'b1;
	b2 = #80000 1'b0;
	b2 = #160000 1'b1;
	b2 = #80000 1'b0;
	b2 = #240000 1'b1;
	b2 = #80000 1'b0;
end 

// b1
initial
begin
	b1 = 1'b0;
	b1 = #160000 1'b1;
	b1 = #80000 1'b0;
	b1 = #80000 1'b1;
	b1 = #320000 1'b0;
	b1 = #160000 1'b1;
	b1 = #160000 1'b0;
end 

// b0
initial
begin
	b0 = 1'b1;
	b0 = #160000 1'b0;
	b0 = #80000 1'b1;
	b0 = #80000 1'b0;
	b0 = #80000 1'b1;
	b0 = #80000 1'b0;
	b0 = #80000 1'b1;
	b0 = #160000 1'b0;
	b0 = #80000 1'b1;
	b0 = #80000 1'b0;
end 

// c0
initial
begin
	c0 = 1'b0;
	c0 = #70000 1'b1;
end 
endmodule

